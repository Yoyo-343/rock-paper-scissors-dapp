import { jsxs as m, jsx as o } from "react/jsx-runtime";
import { useOutsideClick as f, Flex as g, chakra as k, IconButton as x, Input as C } from "@chakra-ui/react";
import { useRef as h } from "react";
import * as y from "./icons/index.js";
const { PlusSecondaryIcon: I, CheckmarkSecondaryIcon: B, MinusPrimaryIcon: z } = y, l = k(x, {
  baseStyle: {
    backgroundColor: "neutrals.700",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    minHeight: 8,
    minWidth: 8,
    padding: 2
  }
}), M = ({ onClose: d, onConfirm: s, onIncrease: a, onReduce: i, value: e, onChange: c, max: n, min: r }) => {
  const t = h(null);
  f({
    ref: t,
    handler: d
  });
  const u = !!(e && r && e <= r), b = !!(e && n && e > n);
  return /* @__PURE__ */ m(g, { gap: "1", p: "2", bg: "black", border: "1px solid", borderColor: "neutrals.700", borderRadius: "full", boxShadow: "menu", position: "absolute", top: 0, transform: "translateY(-100%)", ref: t, children: [
    i && /* @__PURE__ */ o(l, { rounded: "full", size: "xs", "aria-label": "Decrease", disabled: u, onClick: i, icon: /* @__PURE__ */ o(z, {}) }),
    /* @__PURE__ */ o(C, { min: r, max: n, value: e, size: "xs", minW: 20, borderRadius: "lg", type: "number", onChange: (p) => c(parseInt(p.target.value)) }),
    a && /* @__PURE__ */ o(l, { rounded: "full", size: "xs", backgroundColor: "neutrals.700", "aria-label": "Increase", disabled: b, onClick: a, icon: /* @__PURE__ */ o(I, {}) }),
    s && /* @__PURE__ */ o(l, { rounded: "full", size: "xs", backgroundColor: "neutrals.700", "aria-label": "Confirm", disabled: !e, onClick: s, icon: /* @__PURE__ */ o(B, {}) })
  ] });
};
export {
  M as FloatingForm
};
