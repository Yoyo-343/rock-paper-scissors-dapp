import { jsxs as p, Fragment as v, jsx as r } from "react/jsx-runtime";
import { useColorModeValue as y, Box as S, Text as g, Flex as C, IconButton as I, Input as k } from "@chakra-ui/react";
import { useRef as F, useState as f, useEffect as _ } from "react";
import z from "../icons/CrossPrimaryIcon.js";
import j from "../icons/SearchPrimaryIcon.js";
import { SearchError as B } from "./components.js";
function T({ onChange: t, onReset: n, onRefChange: l, error: m, detachedError: b, initValue: x = "", variant: h = "normal", ...w }) {
  const o = F(null), [s, a] = f(x);
  _(() => {
    o.current && l && l(o);
  }, [o.current, l]);
  const [i, u] = f(!0), c = y("neutrals.400", "neutrals.300"), e = h === "rounded";
  return /* @__PURE__ */ p(v, { children: [
    /* @__PURE__ */ p(S, { position: "relative", w: "100%", role: "group", onFocus: () => u(!0), onBlur: () => u(!1), children: [
      /* @__PURE__ */ r(g, { position: "absolute", top: "50%", left: "4", transform: "translateY(-50%)", fontSize: "base", zIndex: 10, color: c, children: /* @__PURE__ */ r(j, { color: i || e ? "text-primary" : c, w: "5", h: "5" }) }),
      s && n && /* @__PURE__ */ r(C, { as: I, alignItems: "center", justifyContent: "center", "aria-label": "Clear search", bg: "transparent", variant: "unstyled", position: "absolute", border: "solid 1px", borderColor: "transparent", right: "3", top: "50%", transform: "translateY(-50%)", _hover: {
        bgColor: "surface-elevated-web"
      }, _focus: {
        top: "50%",
        transform: "translateY(-50%)"
      }, zIndex: 10, cursor: "pointer", color: "currentColor", h: "8", w: "8", p: "1.5", minW: "8", minH: "8", onClick: () => {
        a(""), n();
      }, children: /* @__PURE__ */ r(z, { w: "4", h: "4" }) }),
      /* @__PURE__ */ r(k, { ref: o, type: "text", autoComplete: "off", background: "surface-elevated-web", minH: "11", noOfLines: 1, placeholder: "Search", rounded: e ? "full" : "lg", _placeholder: {
        color: e ? "secondary-web" : "text-subtle",
        fontSize: "16px",
        fontWeight: "500",
        lineHeight: "20px",
        letterSpacing: "0em",
        textOverflow: "ellipsis"
      }, _hover: {
        border: "solid 1px",
        borderColor: "stroke-default-web"
      }, _focus: {
        boxShadow: "none",
        outline: "none",
        background: "surface-elevated",
        border: "1px solid",
        borderColor: e ? "white" : "stroke-default-web",
        color: e ? "text-primary" : "text-subtle"
      }, borderColor: "transparent", px: "12", ...w, onChange: (d) => {
        a(d.target.value), t == null || t(d);
      }, value: s })
    ] }),
    /* @__PURE__ */ r(B, { detachedError: b, error: m, isFocused: i })
  ] });
}
export {
  T as WebSearchInput
};
