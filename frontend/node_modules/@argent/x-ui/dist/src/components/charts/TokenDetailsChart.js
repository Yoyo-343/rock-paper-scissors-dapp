import { jsxs as E, jsx as d } from "react/jsx-runtime";
import { useColorModeValue as j, Box as g, Flex as L, Skeleton as C } from "@chakra-ui/react";
import { createChart as M } from "lightweight-charts";
import { isEmpty as T, noop as B } from "lodash-es";
import { useRef as p, useCallback as u, useEffect as R } from "react";
import V from "../icons/EmptyFaceIcon.js";
import "../Typography.js";
import { buildTokenPrices as X } from "./utils.js";
import { P3 as Y } from "../typography.generated.js";
const _ = ({ tokenGraphData: i, isLoading: f, chartOptions: m, getSeriesConfig: b, markerColor: w, asset: A, onCrosshairMove: c = B, children: F, ...P }) => {
  const r = p(null), o = p(null), t = p(null), I = j("neutrals.400", "neutrals.300"), z = !f && T(i == null ? void 0 : i.prices), H = `${m.height}px`, S = u(() => {
    var e;
    (e = o.current) == null || e.applyOptions({ color: "#FFFFFF4D" });
  }, []), y = u(() => {
    var n, s;
    if (!o.current)
      return;
    const { prices: e } = X({
      tokenGraphPrices: i == null ? void 0 : i.prices.map((l) => ({
        time: l.date,
        value: l.ccyValue
      }))
    });
    (n = o.current) == null || n.setData(e ?? []), (s = r.current) == null || s.timeScale().fitContent();
  }, [i == null ? void 0 : i.prices]), x = u((e) => {
    if (!t.current)
      return;
    const n = t.current.getBoundingClientRect();
    e.clientX >= n.left && e.clientX <= n.right && e.clientY >= n.top && e.clientY <= n.bottom || c(void 0);
  }, [c]);
  R(() => (window == null || window.addEventListener("mousemove", x), () => {
    window == null || window.removeEventListener("mousemove", x);
  }), [x]);
  const h = u((e) => {
    if (!(!t.current || !o.current))
      if (e.point === void 0 || e.point.x < 0 || e.point.x > t.current.clientWidth || e.point.y < 0 || e.point.y > t.current.clientHeight)
        c(void 0);
      else {
        const n = e.seriesData.get(o.current), s = n == null ? void 0 : n.value, l = e.time;
        s && l && c({
          x: e.point.x,
          y: e.point.y,
          time: l,
          price: s,
          width: t.current.clientWidth,
          height: t.current.clientHeight
        });
      }
  }, [c]), W = u((e) => {
    t.current = e, t.current && (r.current && (r.current.unsubscribeCrosshairMove(h), r.current.remove()), r.current = M(t.current, m), o.current = r.current.addLineSeries(b(w)), r.current.subscribeCrosshairMove(h), y());
  }, [
    m,
    b,
    y,
    w,
    h
  ]), v = u(() => {
    var e;
    r.current && (r.current.applyOptions({
      width: (e = t.current) == null ? void 0 : e.clientWidth
    }), r.current.timeScale().fitContent());
  }, []);
  return R(() => (window == null || window.addEventListener("resize", v), () => {
    window == null || window.removeEventListener("resize", v);
  }), [v]), /* @__PURE__ */ E(g, { minHeight: H, position: "relative", onTouchEnd: (e) => {
    e.preventDefault(), c(void 0);
  }, sx: {
    touchAction: "none"
  }, onMouseEnter: S, ...P, children: [
    !f && /* @__PURE__ */ d(g, { ref: W, mx: "-4" }),
    z && /* @__PURE__ */ E(L, { flexDir: "column", justifyContent: "center", alignItems: "center", h: "full", children: [
      /* @__PURE__ */ d(C, { h: "90%", mx: 5, borderRadius: "xl" }),
      " ",
      /* @__PURE__ */ d(V, { color: I, w: "5", h: "5", gap: "2" }),
      /* @__PURE__ */ d(Y, { fontSize: "sm", fontWeight: "semibold", children: "No price available" })
    ] }),
    f && /* @__PURE__ */ d(C, { h: "90%", mx: 5, borderRadius: "xl" }),
    F
  ] });
};
export {
  _ as TokenDetailsChart
};
