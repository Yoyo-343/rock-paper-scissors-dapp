import { jsx as o, jsxs as s, Fragment as a } from "react/jsx-runtime";
import { Flex as c } from "@chakra-ui/react";
import { useMemo as l } from "react";
import d from "../icons/NoShieldSecondaryIcon.js";
import i from "../icons/ShieldPrimaryIcon.js";
import u from "../icons/ShieldSecondaryIcon.js";
import "../Typography.js";
import { usePasswordStrengthIndicatorContext as n } from "./context.js";
import { L1Bold as m, L2Bold as f } from "../typography.generated.js";
const I = ({ ...t }) => {
  const e = n(), r = l(() => e === null ? null : e < 3 ? {
    bgColor: "surface-danger-default",
    textColor: "text-danger",
    label: "Too weak",
    icon: /* @__PURE__ */ o(d, { w: 4, h: 4 })
  } : e === 3 ? {
    bgColor: "surface-success-default",
    textColor: "text-success",
    label: "Good",
    icon: /* @__PURE__ */ o(u, { w: 4, h: 4 })
  } : {
    bgColor: "surface-success-default",
    textColor: "text-success",
    label: "Excellent",
    icon: /* @__PURE__ */ o(i, { w: 4, h: 4 })
  }, [e]);
  return r ? /* @__PURE__ */ s(c, { px: 2, py: 1, bg: r.bgColor, color: r.textColor, rounded: "md", width: "fit-content", alignItems: "center", ...t, children: [
    r.icon,
    /* @__PURE__ */ o(m, { ml: 1, children: r.label })
  ] }) : null;
}, P = ({ ...t }) => {
  const e = n(), r = l(() => {
    if (e === null)
      return {
        label: "The password must contain at least 8 characters",
        bgColor: "surface-transparent",
        textColor: "text-secondary"
      };
    if (e < 3)
      return {
        label: "This is a weak password, try a stronger one",
        bgColor: "surface-danger-default",
        textColor: "text-danger-accessible"
      };
    if (e === 3)
      return {
        label: "Make your password stronger with a few more characters.",
        bgColor: "surface-transparent",
        textColor: "text-secondary"
      };
  }, [e]);
  return /* @__PURE__ */ o(a, { children: r && /* @__PURE__ */ o(f, { bg: r.bgColor, color: r.textColor, px: 4, py: 3, rounded: "md", ...t, children: r.label }) });
};
export {
  P as PasswordStrengthIndicatorComment,
  I as PasswordStrengthIndicatorLabel
};
