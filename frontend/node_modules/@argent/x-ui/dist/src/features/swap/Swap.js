import { jsx as o, jsxs as u, Fragment as R } from "react/jsx-runtime";
import { bigDecimal as N, prettifyCurrencyNumber as V, prettifyTokenAmount as Y, prettifyNumber as _ } from "@argent/x-shared";
import { minimumAmountOutFromTrade as q } from "../../../node_modules/.pnpm/@argent_x-shared@1.53.2_@scure_base@1.1.9_@scure_bip39@1.4.0_async-retry@1.3.3_lodash-es@4.17_k65wuhwgqgayjlfzx62kpc56xa/node_modules/@argent/x-shared/dist/src/features/swap/utils/slippage.js";
import { useDisclosure as D, Flex as s, Spinner as P, Button as K } from "@chakra-ui/react";
import { useMemo as S } from "react";
import L from "../../components/icons/FilterSecondaryIcon.js";
import { SwapDetails as T } from "./SwapDetails.js";
import { SwapSwitchDirectionButton as Q } from "./SwapSwitchDirectionButton.js";
import { SwapInputError as x } from "./types.js";
import { CompoundDialogBottomSheet as f } from "../../components/CompoundDialogBottomSheet/index.js";
import { CompoundInput as y } from "../../components/CompoundInput/index.js";
import { P3 as W } from "../../components/typography.generated.js";
function ce({ assetSelect: p, slippage: t, pay: m, receive: a, onSwitchTokens: M, error: v, isDisabled: F, showDetails: U, trade: e, isLoadingTrade: c, submitButton: h = { show: !0, type: "submit" } }) {
  var O, A;
  const b = ((O = t.options) == null ? void 0 : O.multiplier) || 100, { isOpen: $, onOpen: C, onClose: g } = D(), { isOpen: B, onOpen: E, onClose: d } = D(), [I, r] = S(function() {
    if (e) {
      const n = N.formatUnits({
        value: BigInt(e.payAmount),
        decimals: e.payToken.decimals ?? 18
      }), i = N.formatUnits({
        value: BigInt(e.receiveAmount),
        decimals: e.receiveToken.decimals ?? 18
      }), k = V(Number(i) / Number(n));
      let l = !!(e.payAmountInCurrency && e.receiveAmountInCurrency && Number(e.payAmountInCurrency) !== 0 && Number(e.receiveAmountInCurrency) !== 0) ? (Number(e.payAmountInCurrency) - Number(e.receiveAmountInCurrency)) / Number(e.receiveAmountInCurrency) * 100 : null;
      return l = l === null || l === 0 ? l : l * -1, [k, l];
    }
    return [null, null];
  }, [e]), w = S(function() {
    var n;
    if (e) {
      const { value: i, decimals: k } = q(e, t.value);
      return Y({
        amount: i,
        decimals: k,
        symbol: (n = e.receiveToken) == null ? void 0 : n.symbol
      });
    }
  }, [e, t, (A = e == null ? void 0 : e.receiveToken) == null ? void 0 : A.symbol]), j = S(function() {
    if (e) {
      const n = [
        {
          property: "Swap fee",
          value: `${e.totalFeePercentage * 100}%`
        },
        {
          property: "Min received (incl.fees)",
          value: `${w}`
        },
        {
          property: "Max slippage",
          value: (t.value / b).toString(),
          buttonProps: {
            icon: /* @__PURE__ */ o(L, {}),
            "aria-label": "some label",
            onClick: E
          },
          alert: t.value / b > 1 ? "Your transaction may be frontrun and result in an unfavorable trade" : ""
        },
        {
          property: "Providers",
          value: e.route.name
        }
      ];
      return r ? n.push({
        property: "Price impact",
        value: `${_(r)}%`,
        alert: r && r < -1 ? "Your trade will have a significant impact on the price" : ""
      }) : e && r === null && n.push({
        property: "Price impact",
        value: "",
        alert: "No price found, cannot determine price impact"
      }), n;
    }
    return [];
  }, [e, t, I, r, w]);
  return /* @__PURE__ */ u(R, { children: [
    /* @__PURE__ */ o(f, { isOpen: $, onClose: () => g(), bottomSheetProps: {
      expandOnContentDrag: !0,
      snapPoints: ({ maxHeight: n }) => [
        n - (p.bottomSheetTopMargin ?? 80) / 2
      ]
    }, children: /* @__PURE__ */ o(f.SelectAsset, { loading: p.loading, tokens: p.tokens, onSelect: (n) => {
      p.onSelect(n), g();
    } }) }),
    /* @__PURE__ */ o(f, { isOpen: B, onClose: () => d(), bottomSheetProps: {
      expandOnContentDrag: !0
    }, children: /* @__PURE__ */ o(f.SlippageInput, { onSave: (n) => {
      t.onSave(n), d();
    }, value: t.value, options: t.options }) }),
    /* @__PURE__ */ u(s, { direction: "column", gap: "4", children: [
      /* @__PURE__ */ u(s, { w: "full", direction: "column", gap: "1", children: [
        /* @__PURE__ */ u(s, { pos: "relative", children: [
          /* @__PURE__ */ o(y, { amount: m.amount, token: {
            ...m.token,
            onClick: (n) => {
              var i;
              (i = m.token) == null || i.onClick(n), C();
            }
          }, isLoading: m.isLoading, children: /* @__PURE__ */ o(y.Default, { title: "Pay" }) }),
          /* @__PURE__ */ o(Q, { onClick: M })
        ] }),
        /* @__PURE__ */ o(y, { amount: a.amount, token: {
          ...a.token,
          onClick: (n) => {
            var i;
            (i = a.token) == null || i.onClick(n), C();
          }
        }, isLoading: a.isLoading, children: /* @__PURE__ */ o(y.Default, { title: "Receive" }) })
      ] }),
      !e && c && /* @__PURE__ */ u(s, { bg: "surface-elevated", justifyContent: "space-between", alignItems: "center", p: "4", rounded: "lg", fontWeight: "500", children: [
        /* @__PURE__ */ o(W, { children: " Finding the best rate..." }),
        /* @__PURE__ */ o(P, {})
      ] }),
      U && e && /* @__PURE__ */ o(T, { children: /* @__PURE__ */ o(T.Default, { header: {
        primary: {
          property: "Best price",
          value: `1 ${e.payToken.symbol} = ${I} ${e.receiveToken.symbol}`
        },
        secondary: {
          property: c ? "Updating quote" : "Quote up-to-date",
          icon: c ? /* @__PURE__ */ o(P, { w: "2", h: "2" }) : void 0
        }
      }, items: j }) })
    ] }),
    h.show && /* @__PURE__ */ o(K, { type: h.type, onClick: h.onClick, colorScheme: !c && v && ![x.NO_TOKEN, x.NO_AMOUNT].includes(v) ? "danger" : "primary", w: "full", isDisabled: F, children: c ? "Loading..." : v || "Review swap" })
  ] });
}
export {
  ce as Swap
};
