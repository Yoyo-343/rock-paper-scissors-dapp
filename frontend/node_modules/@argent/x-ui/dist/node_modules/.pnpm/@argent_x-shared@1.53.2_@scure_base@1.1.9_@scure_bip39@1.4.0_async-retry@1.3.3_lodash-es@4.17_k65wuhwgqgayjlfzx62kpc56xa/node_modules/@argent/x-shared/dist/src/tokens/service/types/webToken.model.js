import { z as e } from "zod";
import { addressSchema as a } from "../../../chains/starknet/address.js";
import { apiPriceDetailsSchema as i, apiTokenInfoSchema as o } from "./backend.model.js";
const r = e.object({
  address: a,
  networkId: e.string({ required_error: "Network is required" })
}, { required_error: "Token is required" });
r.required().extend({
  balance: e.string()
});
const n = r.required().extend({
  id: e.number().optional(),
  name: e.string().optional(),
  symbol: e.string().optional(),
  decimals: e.coerce.number().optional(),
  iconUrl: e.string().url("").optional().or(e.literal("")),
  // fallback since some iconUrls are empty, causing validation to fail
  pricingId: e.number().optional(),
  category: e.string().optional(),
  dappId: e.string().optional(),
  brandColor: e.string().optional()
}), t = n.extend({
  balance: e.string()
}), s = n.extend({
  currencyValue: e.string(),
  currencySymbol: e.string().optional(),
  ccyDayChange: e.string().optional(),
  ethDayChange: e.string().optional(),
  unitCurrencyValue: e.string().optional()
}), c = s.extend({
  ...t.shape
});
e.array(c);
r.extend({
  ...i.shape
});
r.extend({
  ...o.shape
});
export {
  r as webBaseTokenSchema,
  n as webTokenSchema,
  c as webTokenWithBalanceAndPriceSchema,
  t as webTokenWithBalanceSchema,
  s as webTokenWithPriceSchema
};
